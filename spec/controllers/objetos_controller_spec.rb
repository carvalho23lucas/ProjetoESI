require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ObjetosController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Objeto. As you add validations to Objeto, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
    categoria_objeto: CategoriaObjeto.new(nome: "Drogas"),
    nome: "Atom",
    unidade_medida: "Kilos",
    meta: 10,
    observacoes: "Não",
    is_inativo: false
    }
  }

  let(:invalid_attributes) {
    {
    categoria_objeto: nil,
    nome: "",
    unidade_medida: "",
    meta: 0
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ObjetosController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all objetos as @objetos" do
      objeto = Objeto.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:objetos)).to eq([objeto])
    end
  end

#  describe "GET #show" do
#    it "assigns the requested objeto as @objeto" do
#      objeto = Objeto.create! valid_attributes
#      get :show, params: {id: objeto.to_param}, session: valid_session
#      expect(assigns(:objeto)).to eq(objeto)
#    end
#  end

  describe "GET #new" do
    it "assigns a new objeto as @objeto" do
      get :new, params: {}, session: valid_session
      expect(assigns(:objeto)).to be_a_new(Objeto)
    end
  end

#  describe "GET #edit" do
#    it "assigns the requested objeto as @objeto" do
#      objeto = Objeto.create! valid_attributes
#      get :edit, params: {id: objeto.to_param}, session: valid_session
#      expect(assigns(:objeto)).to eq(objeto)
#    end
#  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Objeto" do
        expect {
          post :create, params: {objeto: valid_attributes}, session: valid_session
        }.to change(Objeto, :count).by(0)
      end

      it "assigns a newly created objeto as @objeto" do
        post :create, params: {objeto: valid_attributes}, session: valid_session
        expect(assigns(:objeto)).to be_a(Objeto)
      end

    end

    context "with invalid params" do
      it "assigns a newly created but unsaved objeto as @objeto" do
        post :create, params: {objeto: invalid_attributes}, session: valid_session
        expect(assigns(:objeto)).to be_a_new(Objeto)
      end

      it "re-renders the 'new' template" do
        post :create, params: {objeto: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

#  describe "PUT #update" do
##    context "with valid params" do
#      let(:new_attributes) {
#      {
#      categoria_objeto: CategoriaObjeto.new(nome: "Bebidas"),
#      nome: "Suco de atum",
#      unidade_medida: "Litros",
#      meta: 11,
#      observacoes: "Não"
#      }
#     }
#
#      it "updates the requested objeto" do
#        objeto = Objeto.create! valid_attributes
#        put :update, params: {id: objeto.to_param, objeto: new_attributes}, session: valid_session
#        objeto.reload
#      end
#
#      it "assigns the requested objeto as @objeto" do
#        objeto = Objeto.create! valid_attributes
#        put :update, params: {id: objeto.to_param, objeto: valid_attributes}, session: valid_session
#        expect(assigns(:objeto)).to eq(objeto)
#      end
#
#
#      it "redirects to the objeto" do
#        objeto = Objeto.create! valid_attributes
#        put :update, params: {id: objeto.to_param, objeto: valid_attributes}, session: valid_session
#        expect(response).to redirect_to(objeto)
#      end
#    end#
#
#    context "with invalid params" do
#      it "assigns the objeto as @objeto" do
#        objeto = Objeto.create! valid_attributes
#        put :update, params: {id: objeto.to_param, objeto: invalid_attributes}, session: valid_session
#        expect(assigns(:objeto)).to eq(objeto)
#      end
#
#      it "re-renders the 'edit' template" do
#        objeto = Objeto.create! valid_attributes
#        put :update, params: {id: objeto.to_param, objeto: invalid_attributes}, session: valid_session
#        expect(response).to render_template("edit")
##      end
#    end
#  end

#  describe "DELETE #destroy" do
#    it "destroys the requested objeto" do
#      objeto = Objeto.create! valid_attributes
#      expect {
#        delete :destroy, params: {id: objeto.to_param}, session: valid_session
#      }.to change(Objeto, :count).by(-1)
#    end

#    it "redirects to the objetos list" do
#      objeto = Objeto.create! valid_attributes
#      instID = objeto.instituicao_id.to_s
#      delete :destroy, params: {id: objeto.to_param}, session: valid_session
#      expect(response).to redirect_to('/instituicaos/listObjetos/' + instID)
#    end
#  end

end
